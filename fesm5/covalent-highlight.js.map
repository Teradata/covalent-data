{"version":3,"file":"covalent-highlight.js","sources":["ng://@covalent/highlight/highlight.component.ts","ng://@covalent/highlight/copy-code-button/copy-code-button.component.ts","ng://@covalent/highlight/highlight.module.ts"],"sourcesContent":["import {\n  Component,\n  AfterViewInit,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2,\n  SecurityContext,\n  ViewChild,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  TemplateRef,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { ICopyCodeTooltips } from '.';\n\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet hljs: any = require('highlight.js/lib');\n\n@Component({\n  selector: 'td-highlight',\n  styleUrls: ['./highlight.component.scss'],\n  templateUrl: './highlight.component.html',\n})\nexport class TdHighlightComponent implements AfterViewInit, AfterViewChecked {\n  private _initialized: boolean = false;\n\n  private _content: string;\n  private _lang: string = 'typescript';\n\n  /**\n   * content?: string\n   *\n   * Code content to be parsed as highlighted html.\n   * Used to load data dynamically.\n   *\n   * e.g. `.html`, `.ts` , etc.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n    if (this._initialized) {\n      this._loadContent(this._content);\n    }\n  }\n\n  /**\n   * copyCodeToClipboard?: boolean\n   *\n   * Display copy button on code snippets to copy code to clipboard.\n   */\n  @Input() copyCodeToClipboard: boolean = false;\n\n  /**\n   * copyCodeTooltips?: ICopyCodeTooltips\n   *\n   * Tooltips for copy button to copy and upon copying.\n   */\n  @Input() copyCodeTooltips: ICopyCodeTooltips = {};\n\n  /**\n   * lang?: string\n   *\n   * Language of the code content to be parsed as highlighted html.\n   * Defaults to `typescript`\n   *\n   * e.g. `typescript`, `html` , etc.\n   */\n  @Input('lang')\n  set lang(lang: string) {\n    if (!lang) {\n      throw new Error('Error: language attribute must be defined in TdHighlightComponent.');\n    }\n    this._lang = lang;\n    if (this._initialized) {\n      this._loadContent(this._content);\n    }\n  }\n\n  copyContent: string;\n\n  /**\n   * contentReady?: function\n   * Event emitted after the highlight content rendering is finished.\n   */\n  @Output() contentReady: EventEmitter<void> = new EventEmitter<void>();\n  @ViewChild('highlightComponent') highlightComp: ElementRef;\n  @ViewChild('copyComponent') copyComp: ElementRef;\n\n  @ViewChild('tooltip') tooltip: MatTooltip;\n\n  constructor(\n    private _renderer: Renderer2,\n    private _elementRef: ElementRef,\n    private _domSanitizer: DomSanitizer,\n    private cdr: ChangeDetectorRef,\n  ) {}\n\n  ngAfterViewChecked(): void {\n    this.cdr.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this.highlightComp.nativeElement).textContent);\n    } else {\n      this._loadContent(this._content);\n    }\n    this._initialized = true;\n  }\n\n  /**\n   * General method to parse a string of code into HTML Elements and load them into the container\n   */\n  private _loadContent(code: string): void {\n    if (code && code.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      this._elementFromString(this._render(code));\n      if (this.copyCodeToClipboard) {\n        this._renderer.appendChild(this._elementRef.nativeElement, this.copyComp.nativeElement);\n      }\n    }\n    this.contentReady.emit();\n  }\n\n  private _elementFromString(codeStr: string): HTMLPreElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const preElement: HTMLPreElement = this._renderer.createElement('pre');\n    this._renderer.appendChild(this._elementRef.nativeElement, preElement);\n    const codeElement: HTMLElement = this._renderer.createElement('code');\n    this._renderer.appendChild(preElement, codeElement);\n    // Set .highlight class into <code> element\n    this._renderer.addClass(codeElement, 'highlight');\n    codeElement.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, codeStr);\n    return preElement;\n  }\n\n  private _render(contents: string): string {\n    // Trim leading and trailing newlines\n    contents = contents.replace(/^(\\s|\\t)*\\n+/g, '').replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markup by line characters\n    let lines: string[] = contents.split('\\n');\n\n    // check how much indentation is used by the first actual code line\n    const firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so code can be parsed correctly\n    const startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function (line: string): string {\n      return line\n        .replace('=\"\"', '') // remove empty values\n        .replace(startingWhitespaceRegex, '')\n        .replace(/\\s+$/, ''); // remove trailing white spaces\n    });\n\n    const codeToParse: string = lines\n      .join('\\n')\n      .replace(/\\{ \\{/gi, '{{')\n      .replace(/\\} \\}/gi, '}}')\n      .replace(/&lt;/gi, '<')\n      .replace(/&gt;/gi, '>'); // replace with < and > to render HTML in Angular\n    this.copyContent = codeToParse;\n    // Parse code with highlight.js depending on language\n    const highlightedCode: any = hljs.highlight(this._lang, codeToParse, true);\n    highlightedCode.value = highlightedCode.value\n      .replace(/=<span class=\"hljs-value\">\"\"<\\/span>/gi, '')\n      .replace('<head>', '')\n      .replace('<head/>', '');\n    return highlightedCode.value;\n  }\n}\n","import { Component, OnInit, Input, ViewChild, HostListener } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\n\nexport interface ICopyCodeTooltips {\n  copy?: string;\n  copied?: string;\n}\n\n@Component({\n  selector: 'td-copy-code-button',\n  templateUrl: './copy-code-button.component.html',\n  styleUrls: ['./copy-code-button.component.scss'],\n})\nexport class TdCopyCodeButtonComponent {\n  // private _copyCodeTooltips: ICopyCodeTooltips = {};\n  @Input() copiedContent: string;\n  @Input() copyCodeToClipboard: boolean = false;\n  /**\n   * copyCodeTooltips?: ICopyCodeTooltips\n   *\n   * Tooltips for copy button to copy and upon copying.\n   */\n  @Input() copyCodeTooltips: ICopyCodeTooltips = {};\n\n  get copyTooltip(): string {\n    return (this.copyCodeTooltips && this.copyCodeTooltips.copy) || 'Copy';\n  }\n\n  get copiedTooltip(): string {\n    return (this.copyCodeTooltips && this.copyCodeTooltips.copied) || 'Copied';\n  }\n\n  @ViewChild('tooltip') tooltip: MatTooltip;\n\n  textCopied(event: boolean): void {\n    if (event) {\n      this.tooltip.hide();\n      this.tooltip.message = this.copiedTooltip;\n      this.tooltip.show();\n    }\n  }\n  @HostListener('mouseleave')\n  initializeTooltip(): void {\n    setTimeout(() => {\n      this.tooltip.message = this.copyTooltip;\n    }, 200);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { TdHighlightComponent } from './highlight.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TdCopyCodeButtonComponent } from './copy-code-button/copy-code-button.component';\n\n@NgModule({\n  imports: [CommonModule, ClipboardModule, MatIconModule, MatTooltipModule, MatButtonModule],\n  declarations: [TdHighlightComponent, TdCopyCodeButtonComponent],\n  exports: [TdHighlightComponent],\n})\nexport class CovalentHighlightModule {}\n"],"names":["hljs"],"mappings":"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"}