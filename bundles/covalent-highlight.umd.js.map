{"version":3,"file":"covalent-highlight.umd.js","sources":["ng://@covalent/highlight/highlight.component.ts","ng://@covalent/highlight/copy-code-button/copy-code-button.component.ts","ng://@covalent/highlight/highlight.module.ts"],"sourcesContent":["import {\n  Component,\n  AfterViewInit,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2,\n  SecurityContext,\n  ViewChild,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  TemplateRef,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { ICopyCodeTooltips } from '.';\n\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet hljs: any = require('highlight.js/lib');\n\n@Component({\n  selector: 'td-highlight',\n  styleUrls: ['./highlight.component.scss'],\n  templateUrl: './highlight.component.html',\n})\nexport class TdHighlightComponent implements AfterViewInit, AfterViewChecked {\n  private _initialized: boolean = false;\n\n  private _content: string;\n  private _lang: string = 'typescript';\n\n  /**\n   * content?: string\n   *\n   * Code content to be parsed as highlighted html.\n   * Used to load data dynamically.\n   *\n   * e.g. `.html`, `.ts` , etc.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n    if (this._initialized) {\n      this._loadContent(this._content);\n    }\n  }\n\n  /**\n   * copyCodeToClipboard?: boolean\n   *\n   * Display copy button on code snippets to copy code to clipboard.\n   */\n  @Input() copyCodeToClipboard: boolean = false;\n\n  /**\n   * copyCodeTooltips?: ICopyCodeTooltips\n   *\n   * Tooltips for copy button to copy and upon copying.\n   */\n  @Input() copyCodeTooltips: ICopyCodeTooltips = {};\n\n  /**\n   * lang?: string\n   *\n   * Language of the code content to be parsed as highlighted html.\n   * Defaults to `typescript`\n   *\n   * e.g. `typescript`, `html` , etc.\n   */\n  @Input('lang')\n  set lang(lang: string) {\n    if (!lang) {\n      throw new Error('Error: language attribute must be defined in TdHighlightComponent.');\n    }\n    this._lang = lang;\n    if (this._initialized) {\n      this._loadContent(this._content);\n    }\n  }\n\n  copyContent: string;\n\n  /**\n   * contentReady?: function\n   * Event emitted after the highlight content rendering is finished.\n   */\n  @Output() contentReady: EventEmitter<void> = new EventEmitter<void>();\n  @ViewChild('highlightComponent') highlightComp: ElementRef;\n  @ViewChild('copyComponent') copyComp: ElementRef;\n\n  @ViewChild('tooltip') tooltip: MatTooltip;\n\n  constructor(\n    private _renderer: Renderer2,\n    private _elementRef: ElementRef,\n    private _domSanitizer: DomSanitizer,\n    private cdr: ChangeDetectorRef,\n  ) {}\n\n  ngAfterViewChecked(): void {\n    this.cdr.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this.highlightComp.nativeElement).textContent);\n    } else {\n      this._loadContent(this._content);\n    }\n    this._initialized = true;\n  }\n\n  /**\n   * General method to parse a string of code into HTML Elements and load them into the container\n   */\n  private _loadContent(code: string): void {\n    if (code && code.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      this._elementFromString(this._render(code));\n      if (this.copyCodeToClipboard) {\n        this._renderer.appendChild(this._elementRef.nativeElement, this.copyComp.nativeElement);\n      }\n    }\n    this.contentReady.emit();\n  }\n\n  private _elementFromString(codeStr: string): HTMLPreElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const preElement: HTMLPreElement = this._renderer.createElement('pre');\n    this._renderer.appendChild(this._elementRef.nativeElement, preElement);\n    const codeElement: HTMLElement = this._renderer.createElement('code');\n    this._renderer.appendChild(preElement, codeElement);\n    // Set .highlight class into <code> element\n    this._renderer.addClass(codeElement, 'highlight');\n    codeElement.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, codeStr);\n    return preElement;\n  }\n\n  private _render(contents: string): string {\n    // Trim leading and trailing newlines\n    contents = contents.replace(/^(\\s|\\t)*\\n+/g, '').replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markup by line characters\n    let lines: string[] = contents.split('\\n');\n\n    // check how much indentation is used by the first actual code line\n    const firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so code can be parsed correctly\n    const startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function (line: string): string {\n      return line\n        .replace('=\"\"', '') // remove empty values\n        .replace(startingWhitespaceRegex, '')\n        .replace(/\\s+$/, ''); // remove trailing white spaces\n    });\n\n    const codeToParse: string = lines\n      .join('\\n')\n      .replace(/\\{ \\{/gi, '{{')\n      .replace(/\\} \\}/gi, '}}')\n      .replace(/&lt;/gi, '<')\n      .replace(/&gt;/gi, '>'); // replace with < and > to render HTML in Angular\n    this.copyContent = codeToParse;\n    // Parse code with highlight.js depending on language\n    const highlightedCode: any = hljs.highlight(this._lang, codeToParse, true);\n    highlightedCode.value = highlightedCode.value\n      .replace(/=<span class=\"hljs-value\">\"\"<\\/span>/gi, '')\n      .replace('<head>', '')\n      .replace('<head/>', '');\n    return highlightedCode.value;\n  }\n}\n","import { Component, OnInit, Input, ViewChild, HostListener } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\n\nexport interface ICopyCodeTooltips {\n  copy?: string;\n  copied?: string;\n}\n\n@Component({\n  selector: 'td-copy-code-button',\n  templateUrl: './copy-code-button.component.html',\n  styleUrls: ['./copy-code-button.component.scss'],\n})\nexport class TdCopyCodeButtonComponent {\n  // private _copyCodeTooltips: ICopyCodeTooltips = {};\n  @Input() copiedContent: string;\n  @Input() copyCodeToClipboard: boolean = false;\n  /**\n   * copyCodeTooltips?: ICopyCodeTooltips\n   *\n   * Tooltips for copy button to copy and upon copying.\n   */\n  @Input() copyCodeTooltips: ICopyCodeTooltips = {};\n\n  get copyTooltip(): string {\n    return this.copyCodeTooltips.copy || 'Copy';\n  }\n\n  get copiedTooltip(): string {\n    return this.copyCodeTooltips.copied || 'Copied';\n  }\n\n  @ViewChild('tooltip') tooltip: MatTooltip;\n\n  textCopied(event: boolean): void {\n    if (event) {\n      this.tooltip.hide();\n      this.tooltip.message = this.copiedTooltip;\n      this.tooltip.show();\n    }\n  }\n  @HostListener('mouseleave')\n  initializeTooltip(): void {\n    setTimeout(() => {\n      this.tooltip.message = this.copyTooltip;\n    }, 200);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { TdHighlightComponent } from './highlight.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TdCopyCodeButtonComponent } from './copy-code-button/copy-code-button.component';\n\n@NgModule({\n  imports: [CommonModule, ClipboardModule, MatIconModule, MatTooltipModule, MatButtonModule],\n  declarations: [TdHighlightComponent, TdCopyCodeButtonComponent],\n  exports: [TdHighlightComponent],\n})\nexport class CovalentHighlightModule {}\n"],"names":["EventEmitter","SecurityContext","hljs","Component","Renderer2","ElementRef","DomSanitizer","ChangeDetectorRef","Input","Output","ViewChild","HostListener","NgModule","CommonModule","ClipboardModule","MatIconModule","MatTooltipModule","MatButtonModule"],"mappings":"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"}