{"version":3,"sources":["ng://@covalent/highlight/highlight.component.ts","ng://@covalent/highlight/copy-code-button/copy-code-button.component.ts","ng://@covalent/highlight/highlight.module.ts"],"names":["TdHighlightComponent","_renderer","_elementRef","_domSanitizer","cdr","this","_initialized","_lang","copyCodeToClipboard","copyCodeTooltips","contentReady","EventEmitter","Object","defineProperty","prototype","content","_content","_loadContent","lang","Error","ngAfterViewChecked","detectChanges","ngAfterViewInit","highlightComp","textContent","code","trim","length","setProperty","nativeElement","_elementFromString","_render","appendChild","copyComp","emit","codeStr","preElement","createElement","codeElement","addClass","innerHTML","sanitize","SecurityContext","HTML","contents","lines","replace","split","firstLineWhitespace","match","startingWhitespaceRegex","RegExp","codeToParse","map","line","join","copyContent","highlightedCode","hljs","highlight","value","Component","args","selector","template","Renderer2","ElementRef","DomSanitizer","ChangeDetectorRef","Input","Output","ViewChild","TdCopyCodeButtonComponent","copy","copied","textCopied","event","tooltip","hide","message","copiedTooltip","show","initializeTooltip","_this","setTimeout","copyTooltip","HostListener","CovalentHighlightModule","NgModule","imports","CommonModule","ClipboardModule","MatIconModule","MatTooltipModule","MatButtonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Component,\n  AfterViewInit,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2,\n  SecurityContext,\n  ViewChild,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  TemplateRef,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { ICopyCodeTooltips } from '.';\n\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet hljs: any = require('highlight.js/lib');\n\n@Component({\n  selector: 'td-highlight',\n  styleUrls: ['./highlight.component.scss'],\n  templateUrl: './highlight.component.html',\n})\nexport class TdHighlightComponent implements AfterViewInit, AfterViewChecked {\n  private _initialized: boolean = false;\n\n  private _content: string;\n  private _lang: string = 'typescript';\n\n  /**\n   * content?: string\n   *\n   * Code content to be parsed as highlighted html.\n   * Used to load data dynamically.\n   *\n   * e.g. `.html`, `.ts` , etc.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n    if (this._initialized) {\n      this._loadContent(this._content);\n    }\n  }\n\n  /**\n   * copyCodeToClipboard?: boolean\n   *\n   * Display copy button on code snippets to copy code to clipboard.\n   */\n  @Input() copyCodeToClipboard: boolean = false;\n\n  /**\n   * copyCodeTooltips?: ICopyCodeTooltips\n   *\n   * Tooltips for copy button to copy and upon copying.\n   */\n  @Input() copyCodeTooltips: ICopyCodeTooltips = {};\n\n  /**\n   * lang?: string\n   *\n   * Language of the code content to be parsed as highlighted html.\n   * Defaults to `typescript`\n   *\n   * e.g. `typescript`, `html` , etc.\n   */\n  @Input('lang')\n  set lang(lang: string) {\n    if (!lang) {\n      throw new Error('Error: language attribute must be defined in TdHighlightComponent.');\n    }\n    this._lang = lang;\n    if (this._initialized) {\n      this._loadContent(this._content);\n    }\n  }\n\n  copyContent: string;\n\n  /**\n   * contentReady?: function\n   * Event emitted after the highlight content rendering is finished.\n   */\n  @Output() contentReady: EventEmitter<void> = new EventEmitter<void>();\n  @ViewChild('highlightComponent') highlightComp: ElementRef;\n  @ViewChild('copyComponent') copyComp: ElementRef;\n\n  @ViewChild('tooltip') tooltip: MatTooltip;\n\n  constructor(\n    private _renderer: Renderer2,\n    private _elementRef: ElementRef,\n    private _domSanitizer: DomSanitizer,\n    private cdr: ChangeDetectorRef,\n  ) {}\n\n  ngAfterViewChecked(): void {\n    this.cdr.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this.highlightComp.nativeElement).textContent);\n    } else {\n      this._loadContent(this._content);\n    }\n    this._initialized = true;\n  }\n\n  /**\n   * General method to parse a string of code into HTML Elements and load them into the container\n   */\n  private _loadContent(code: string): void {\n    if (code && code.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      this._elementFromString(this._render(code));\n      if (this.copyCodeToClipboard) {\n        this._renderer.appendChild(this._elementRef.nativeElement, this.copyComp.nativeElement);\n      }\n    }\n    this.contentReady.emit();\n  }\n\n  private _elementFromString(codeStr: string): HTMLPreElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const preElement: HTMLPreElement = this._renderer.createElement('pre');\n    this._renderer.appendChild(this._elementRef.nativeElement, preElement);\n    const codeElement: HTMLElement = this._renderer.createElement('code');\n    this._renderer.appendChild(preElement, codeElement);\n    // Set .highlight class into <code> element\n    this._renderer.addClass(codeElement, 'highlight');\n    codeElement.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, codeStr);\n    return preElement;\n  }\n\n  private _render(contents: string): string {\n    // Trim leading and trailing newlines\n    contents = contents.replace(/^(\\s|\\t)*\\n+/g, '').replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markup by line characters\n    let lines: string[] = contents.split('\\n');\n\n    // check how much indentation is used by the first actual code line\n    const firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so code can be parsed correctly\n    const startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function (line: string): string {\n      return line\n        .replace('=\"\"', '') // remove empty values\n        .replace(startingWhitespaceRegex, '')\n        .replace(/\\s+$/, ''); // remove trailing white spaces\n    });\n\n    const codeToParse: string = lines\n      .join('\\n')\n      .replace(/\\{ \\{/gi, '{{')\n      .replace(/\\} \\}/gi, '}}')\n      .replace(/&lt;/gi, '<')\n      .replace(/&gt;/gi, '>'); // replace with < and > to render HTML in Angular\n    this.copyContent = codeToParse;\n    // Parse code with highlight.js depending on language\n    const highlightedCode: any = hljs.highlight(this._lang, codeToParse, true);\n    highlightedCode.value = highlightedCode.value\n      .replace(/=<span class=\"hljs-value\">\"\"<\\/span>/gi, '')\n      .replace('<head>', '')\n      .replace('<head/>', '');\n    return highlightedCode.value;\n  }\n}\n","import { Component, OnInit, Input, ViewChild, HostListener } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\n\nexport interface ICopyCodeTooltips {\n  copy?: string;\n  copied?: string;\n}\n\n@Component({\n  selector: 'td-copy-code-button',\n  templateUrl: './copy-code-button.component.html',\n  styleUrls: ['./copy-code-button.component.scss'],\n})\nexport class TdCopyCodeButtonComponent {\n  // private _copyCodeTooltips: ICopyCodeTooltips = {};\n  @Input() copiedContent: string;\n  @Input() copyCodeToClipboard: boolean = false;\n  /**\n   * copyCodeTooltips?: ICopyCodeTooltips\n   *\n   * Tooltips for copy button to copy and upon copying.\n   */\n  @Input() copyCodeTooltips: ICopyCodeTooltips = {};\n\n  get copyTooltip(): string {\n    return this.copyCodeTooltips.copy || 'Copy';\n  }\n\n  get copiedTooltip(): string {\n    return this.copyCodeTooltips.copied || 'Copied';\n  }\n\n  @ViewChild('tooltip') tooltip: MatTooltip;\n\n  textCopied(event: boolean): void {\n    if (event) {\n      this.tooltip.hide();\n      this.tooltip.message = this.copiedTooltip;\n      this.tooltip.show();\n    }\n  }\n  @HostListener('mouseleave')\n  initializeTooltip(): void {\n    setTimeout(() => {\n      this.tooltip.message = this.copyTooltip;\n    }, 200);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { TdHighlightComponent } from './highlight.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TdCopyCodeButtonComponent } from './copy-code-button/copy-code-button.component';\n\n@NgModule({\n  imports: [CommonModule, ClipboardModule, MatIconModule, MatTooltipModule, MatButtonModule],\n  declarations: [TdHighlightComponent, TdCopyCodeButtonComponent],\n  exports: [TdHighlightComponent],\n})\nexport class CovalentHighlightModule {}\n"]}